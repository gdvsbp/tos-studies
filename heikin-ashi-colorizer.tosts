declare UPPER;

input DifferentiateUncertainty = yes;

def haClose = Round(ohlc4, 2);
def haOpen = if haOpen[1] == 0 then haClose[1] else (haOpen[1] + haClose[1]) / 2;
def haHigh = Round(Max(Max(high, haOpen), haClose), 2);
def haLow = Round(Min(Min(low, haOpen), haClose), 2);

def indecisionIndicator = if haHigh > Max(haOpen, haClose) and haLow < Min(haOpen, haClose) and DifferentiateUncertainty then 1 else 2;

def final = if haClose > haOpen then indecisionIndicator * 1 else if haClose < haOpen then indecisionIndicator * -1 else 0;

AssignPriceColor(
  # POSITIVE
  if final == 2
    then CreateColor(0, 225, 0)
  # (POSITIVE)
  else if final == 1
    then CreateColor(150, 225, 150)
  # (NEGATIVE)
  else if final == -1
    then CreateColor(200, 100, 100)
  # NEGATIVE
  else if final == -2
    then CreateColor(200, 0, 0)
  # -NEUTRAL-
  else CreateColor(200, 200, 200)
);