input todayHighLowDelay = 20;

def bar = barNumber();
def h = high;
def l = low;
def c = close;
def firstBar = if getTime() crosses above RegularTradingStart(GetYYYYMMDD()) and
                  !isNaN(close)
               then bar
               else double.nan;
def lastBar = if getTime() crosses above RegularTradingEnd(GetYYYYMMDD()) and
                 !isNaN(close)
              then bar
              else double.nan;
def todayHighLowThreshold = if getTime() crosses above RegularTradingStart(GetYYYYMMDD()) + (todayHighLowDelay * 60 * 1000) and
                  !isNaN(close)
               then bar
               else double.nan;

addVerticalLine(bar == HighestAll(firstBar), "first bar", color.cyan, curve.short_dash);
addVerticalLine(bar == HighestAll(lastBar), "last bar", color.cyan, curve.short_dash);
addVerticalLine(bar == HighestAll(todayHighLowThreshold), "threshold bar", color.magenta, curve.short_dash);

def bar_t1 = if !isNaN(firstBar)
            then bar
            else bar_t1[1];
def bar_t2 = if !isNaN(lastBar)
             then bar
             else bar_t2[1];
def prevFirstBar = if bar_t1 != bar_t1[1]
              then bar_t1[1]
              else prevFirstBar[1];
def prevLastBar = if bar_t2 != bar_t2[1]
                  then bar_t2[1]
                  else prevLastBar[1];
addVerticalLine(bar == HighestAll(prevFirstBar), "prev first bar", color.red, curve.short_dash);
addVerticalLine(bar == HighestAll(prevLastBar), "prev Last bar", color.red, curve.short_dash);

# Premarket high/low
def hhPm = if bar == HighestAll(lastBar)
         then h
         else if between(bar, highestAll(lastBar), highestAll(firstBar) - 1) and
                 h > hhPm[1]
              then h
              else hhPm[1];

def hhBarPm = if h == hhPm and between(bar, highestAll(lastBar), highestAll(firstBar) - 1)
            then bar
            else double.nan;

def llPm = if bar == HighestAll(lastBar)
         then l
         else if between(bar, highestAll(lastBar), highestAll(firstBar) - 1) and
                 l < llPm[1]
              then l
              else llPm[1];

def llBarPm = if l == llPm and between(bar, highestAll(lastBar), highestAll(firstBar) - 1)
            then bar
            else double.nan;

plot PmHigh = if bar >= highestAll(hhBarPm)
                   then highestAll(if isNaN(c[-1])
                                   then hhPm
                                   else double.nan)
                   else double.nan;
     PmHigh.SetStyle(Curve.Long_Dash);
     PmHigh.SetLineWeight(3);
     PmHigh.SetDefaultColor(Color.Cyan);
     PmHigh.HideTitle();

plot PmLow = if bar >= HighestAll(llBarPm)
                  then highestAll(if isNaN(c[-1])
                                  then llPm
                                  else double.nan)
                  else double.nan;
     PmLow.SetStyle(Curve.Long_Dash);
     PmLow.SetLineWeight(3);
     PmLow.SetDefaultColor(Color.Violet);
     PmLow.HideTitle();

# Prior day high/low
def hh = if bar == HighestAll(prevFirstBar)
         then h
         else if between(bar, highestAll(prevFirstBar), highestAll(LastBar) - 1) and
                 h > hh[1]
              then h
              else hh[1];

def hhBar = if h == hh and between(bar, highestAll(prevFirstBar), highestAll(LastBar) - 1)
            then bar
            else double.nan;

def ll = if bar == HighestAll(prevFirstBar)
         then l
         else if between(bar, highestAll(prevFirstBar), highestAll(LastBar) - 1) and
                 l < ll[1]
              then l
              else ll[1];

def llBar = if l == ll and between(bar, highestAll(prevFirstBar), highestAll(LastBar) - 1)
            then bar
            else double.nan;

plot PrevDayHigh = if bar >= highestAll(hhBar)
                   then highestAll(if isNaN(c[-1])
                                   then hh
                                   else double.nan)
                   else double.nan;
     PrevDayHigh.SetStyle(Curve.Long_Dash);
     PrevDayHigh.SetLineWeight(3);
     PrevDayHigh.SetDefaultColor(Color.Yellow);
     PrevDayHigh.HideTitle();
plot PrevDayLow = if bar >= HighestAll(llBar)
                  then highestAll(if isNaN(c[-1])
                                  then ll
                                  else double.nan)
                  else double.nan;
     PrevDayLow.SetStyle(Curve.Long_Dash);
     PrevDayLow.SetLineWeight(3);
     PrevDayLow.SetDefaultColor(Color.Orange);
     PrevDayLow.HideTitle();

# Current day high/low
def hhToday = if bar == HighestAll(firstBar)
         then h
         else if bar > highestAll(firstBar) and
                 h > hhToday[1]
              then h
              else hhToday[1];

def hhBarToday = if h == hhToday and bar >= highestAll(firstBar)
            then bar
            else double.nan;

def llToday = if bar == HighestAll(firstBar)
         then l
         else if bar > highestAll(firstBar) and
                 l < llToday[1]
              then l
              else llToday[1];

def llBarToday = if l == llToday and bar >= highestAll(firstBar)
            then bar
            else double.nan;

plot TodayHigh = if bar >= highestAll(todayHighLowThreshold) and HighestAll(todayHighLowThreshold) >= HighestAll(firstBar)
                   then highestAll(if isNaN(c[-1])
                                   then hhToday
                                   else double.nan)
                   else double.nan;
     TodayHigh.SetStyle(Curve.Long_Dash);
     TodayHigh.SetLineWeight(3);
     TodayHigh.SetDefaultColor(Color.Green);
     TodayHigh.HideTitle();
plot TodayLow = if bar >= HighestAll(todayHighLowThreshold) and HighestAll(todayHighLowThreshold) >= HighestAll(firstBar)
                  then highestAll(if isNaN(c[-1])
                                  then llToday
                                  else double.nan)
                  else double.nan;
     TodayLow.SetStyle(Curve.Long_Dash);
     TodayLow.SetLineWeight(3);
     TodayLow.SetDefaultColor(Color.DARK_GREEN);
     TodayLow.HideTitle();

# End Code Previous Days High, Low, Mean