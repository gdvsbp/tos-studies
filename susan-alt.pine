// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© gdvsbp

//@version=5
indicator("Susan Lines Alt", overlay = true)

_high = high
_low = low
_time = time

greater_than(myInputA, myInputB, isGreaterThan = true) =>
    bool response = isGreaterThan ? myInputA > myInputB : myInputA < myInputB

peak_condition(myInput) =>
    case1 = greater_than(myInput[1], myInput[2], true) and greater_than(myInput[1], myInput[0], true)
    case2 = greater_than(myInput[2], myInput[3], true) and myInput[2] == myInput[1] and greater_than(myInput[1], myInput[0], true)
    case3 = greater_than(myInput[3], myInput[4], true) and myInput[3] == myInput[2] and myInput[2] == myInput[1] and greater_than(myInput[1], myInput[0], true)
    float response = (case1 or case2 or case3) ? myInput[1] : na

peak_condition_major(myInput, mySecondaryInput) =>
    case2 = greater_than(myInput[4], myInput[3], false) and greater_than(myInput[3], myInput[2], false) and greater_than(myInput[1], myInput[2], false) and greater_than(myInput[0], myInput[1], false)

    float peakCondition = case2 ? myInput[2] : na
    int peakConditionSecondary = case2 ? mySecondaryInput[2] : na
    [peakCondition, peakConditionSecondary]

valley_condition(myInput) =>
    case1 = greater_than(myInput[1], myInput[2], false) and greater_than(myInput[1], myInput[0], false)
    case2 = greater_than(myInput[2], myInput[3], false) and myInput[2] == myInput[1] and greater_than(myInput[1], myInput[0], false)
    case3 = greater_than(myInput[3], myInput[4], false) and myInput[3] == myInput[2] and myInput[2] == myInput[1] and greater_than(myInput[1], myInput[0], false)
    bool valleyCondition = case1 or case2 or case3

valley_condition_major(myInput, mySecondaryInput) =>
    case2 = greater_than(myInput[4], myInput[3], true) and greater_than(myInput[3], myInput[2], true) and greater_than(myInput[1], myInput[2], true) and greater_than(myInput[0], myInput[1], true)

    float valleyCondition = case2 ? myInput[2] : na
    int valleyConditionSecondary = case2 ? mySecondaryInput[2] : na
    [valleyCondition, valleyConditionSecondary]

float peakCondition = peak_condition(_high)
peaksV1 = ta.valuewhen(peakCondition, peakCondition, 0)
peaksV1Time = ta.valuewhen(peakCondition, _time[1], 0)
peaksV2 = ta.valuewhen(peakCondition, peakCondition, 1)
peaksV2Time = ta.valuewhen(peakCondition, _time[1], 1)
peaksV3 = ta.valuewhen(peakCondition, peakCondition, 2)
peaksV3Time = ta.valuewhen(peakCondition, _time[1], 2)

[peakMajPrice, peakMajTime] = peak_condition_major(_high, _time)
peaksV1Maj = ta.valuewhen(peakMajPrice, peakMajPrice, 0)
peaksV1MajTime = ta.valuewhen(peakMajPrice, peakMajTime, 0)
peaksV2Maj = ta.valuewhen(peakMajPrice, peakMajPrice, 1)
peaksV2MajTime = ta.valuewhen(peakMajPrice, peakMajTime, 1)
peaksV3Maj = ta.valuewhen(peakMajPrice, peakMajPrice, 2)
peaksV3MajTime = ta.valuewhen(peakMajPrice, peakMajTime, 2)

bool valleyCondition = valley_condition(_low)
valleysV1 = ta.valuewhen(valleyCondition, _low[1], 0)
valleysV1Time = ta.valuewhen(valleyCondition, _time[1], 0)
valleysV2 = ta.valuewhen(valleyCondition, _low[1], 1)
valleysV2Time = ta.valuewhen(valleyCondition, _time[1], 1)
valleysV3 = ta.valuewhen(valleyCondition, _low[1], 2)
valleysV3Time = ta.valuewhen(valleyCondition, _time[1], 2)

[valleyMajPrice, valleyMajTime] = valley_condition_major(_low, _time)
valleysV1Maj = ta.valuewhen(valleyMajPrice, valleyMajPrice, 0)
valleysV1MajTime = ta.valuewhen(valleyMajPrice, valleyMajTime, 0)
valleysV2Maj = ta.valuewhen(valleyMajPrice, valleyMajPrice, 1)
valleysV2MajTime = ta.valuewhen(valleyMajPrice, valleyMajTime, 1)
valleysV3Maj = ta.valuewhen(valleyMajPrice, valleyMajPrice, 2)
valleysV3MajTime = ta.valuewhen(valleyMajPrice, valleyMajTime, 2)

// peak lines
peaks1 = line.new(x1 = peaksV2Time, y1 = peaksV2, x2 = peaksV1Time, y2 = peaksV1, xloc = xloc.bar_time, extend = extend.right, color=color.new(#cccc44, 0))
peaks2 = line.new(x1 = peaksV3Time, y1 = peaksV3, x2 = peaksV2Time, y2 = peaksV2, xloc = xloc.bar_time, extend = extend.right, color=color.new(#cccc44, 50), style=line.style_dashed)

peaksMaj1 = line.new(x1 = peaksV2MajTime, y1 = peaksV2Maj, x2 = peaksV1MajTime, y2 = peaksV1Maj, xloc = xloc.bar_time, extend = extend.right, color=color.new(#cccc44, 0), width = 2)
peaksMaj2 = line.new(x1 = peaksV3MajTime, y1 = peaksV3Maj, x2 = peaksV2MajTime, y2 = peaksV2Maj, xloc = xloc.bar_time, extend = extend.right, color=color.new(#cccc44, 50), style=line.style_dashed, width = 2)

var peakLinesArray = array.new_line()
var peakMajLinesArray = array.new_line()

array.push(peakMajLinesArray, peaksMaj1) // Push each new line into array after drawing it
array.push(peakMajLinesArray, peaksMaj2) // Push each new line into array after drawing it
array.push(peakLinesArray, peaks1) // Push each new line into array after drawing it
array.push(peakLinesArray, peaks2) // Push each new line into array after drawing it

while array.size(peakMajLinesArray) > 2
    line.delete(array.remove(peakMajLinesArray, 0))

while array.size(peakLinesArray) > 2
    line.delete(array.remove(peakLinesArray, 0))

// valley lines
valleys1 = line.new(x1 = valleysV2Time, y1 = valleysV2, x2 = valleysV1Time, y2 = valleysV1, xloc = xloc.bar_time, extend = extend.right, color=color.new(#cc5544, 0))
valleys2 = line.new(x1 = valleysV3Time, y1 = valleysV3, x2 = valleysV2Time, y2 = valleysV2, xloc = xloc.bar_time, extend = extend.right, color=color.new(#cc5544, 50), style=line.style_dashed)

valleysMaj1 = line.new(x1 = valleysV2MajTime, y1 = valleysV2Maj, x2 = valleysV1MajTime, y2 = valleysV1Maj, xloc = xloc.bar_time, extend = extend.right, color=color.new(#cc5544, 0), width = 2)
valleysMaj2 = line.new(x1 = valleysV3MajTime, y1 = valleysV3Maj, x2 = valleysV2MajTime, y2 = valleysV2Maj, xloc = xloc.bar_time, extend = extend.right, color=color.new(#cc5544, 50), style=line.style_dashed, width = 2)

var valleyLinesArray = array.new_line()
var valleyMajLinesArray = array.new_line()

array.push(valleyLinesArray, valleys1) // Push each new line into array after drawing it
array.push(valleyLinesArray, valleys2) // Push each new line into array after drawing it
array.push(valleyMajLinesArray, valleysMaj1) // Push each new line into array after drawing it
array.push(valleyMajLinesArray, valleysMaj2) // Push each new line into array after drawing it

while array.size(valleyLinesArray) > 2
    line.delete(array.remove(valleyLinesArray, 0))

while array.size(valleyMajLinesArray) > 2
    line.delete(array.remove(valleyMajLinesArray, 0))