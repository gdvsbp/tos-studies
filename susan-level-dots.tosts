def vOpen = open;
def vClose = close;
def vLow = low;
def vHigh = high;
def offset = -1;

defineGlobalColor("highColor", Color.YELLOW);
defineGlobalColor("lowColor", Color.DARK_ORANGE);

def peaksV = if (
  (vHigh[3 + offset] < vHigh[2 + offset] && vHigh[1 + offset] < vHigh[2 + offset])
  or (vHigh[4 + offset] < vHigh[3 + offset] && vHigh[3 + offset] == vHigh[2 + offset] && vHigh[1 + offset] < vHigh[2 + offset])
  or (vHigh[5 + offset] < vHigh[4 + offset] && vHigh[4 + offset] == vHigh[2 + offset] && vHigh[3 + offset] == vHigh[2 + offset] && vHigh[1 + offset] < vHigh[2 + offset])
) then vHigh[2 + offset] else double.NaN;

plot Peaks = peaksV[-2 - offset]; # adjust?
Peaks.setPaintingStrategy(PaintingStrategy.POINTS);
Peaks.setLineWeight(3);
Peaks.setDefaultColor(globalColor("highColor"));

def valleysV = if (
  (vLow[3 + offset] > vLow[2 + offset] && vLow[1 + offset] > vLow[2 + offset])
  or (vLow[4 + offset] > vLow[3 + offset] && vLow[3 + offset] == vLow[2 + offset] && vLow[1 + offset] > vLow[2 + offset])
  or (vLow[5 + offset] > vLow[4 + offset] && vLow[4 + offset] == vLow[2 + offset] && vLow[3 + offset] == vLow[2 + offset] && vLow[1 + offset] > vLow[2 + offset])
) then vLow[2 + offset] else double.NaN;

plot Valleys = valleysV[-2 - offset]; # adjust?
Valleys.setPaintingStrategy(PaintingStrategy.POINTS);
Valleys.setLineWeight(3);
Valleys.setDefaultColor(globalColor("lowColor"));