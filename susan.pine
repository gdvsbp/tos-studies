// @version=5
indicator("Susan", "", overlay = true)

// general settings
var offset = -1

var previousPeak = high
var previousPeakTime = time
var currentPeak = high
var currentPeakTime = time
var peakLine = line.new(x1 = 0, y1 = 0, x2 = 0, y2 = 0)

calcPeaks(high) =>
    if ((high[2] < high[1] and high[0] < high[1]) or (high[3] < high[2] and high[2] == high[1] and high[0] < high[1]) or (high[4] < high[3] and high[3] == high[1] and high[2] == high[1] and high[0] < high[1]))
        high[1]
    else
        na

peaksV = calcPeaks(high)

if (peaksV)
    peaksV := high[1]
    // track the previous and current peak
    previousPeak := currentPeak
    previousPeakTime := currentPeakTime
    currentPeak := high[1]
    currentPeakTime := time[1]

plot(peaksV, title='Peaks', color=color.new(color.yellow, 0), linewidth=3, style=plot.style_circles, offset = -1)

// example of when a peak is lower than the previous peak we delete any old lines and draw a new line connecting them
if (currentPeak < previousPeak)
    line.delete(peakLine)
    peakLine := line.new(x1 = previousPeakTime, y1 = previousPeak, x2 = currentPeakTime, y2 = currentPeak, xloc = xloc.bar_time, extend = extend.right)
    line.set_color(id = peakLine, color = color.yellow)
else
    line.delete(peakLine)

// VALLEYS

var previousValley = low
var previousValleyTime = time
var currentValley = low
var currentValleyTime = time
var valleyLine = line.new(x1 = 0, y1 = 0, x2 = 0, y2 = 0)

calcValley(low) =>
    if (low[2] > low[1] and low[0] > low[1])
        low[1]
    else
        na

valleyV = calcValley(low)

if (valleyV)
    valleyV := low[1]
    // track the previous and current valley
    previousValley := currentValley
    previousValleyTime := currentValleyTime
    currentValley := low[1]
    currentValleyTime := time[1]


plot(valleyV, title='Valley', color=color.new(color.orange, 0), linewidth=3, style=plot.style_circles, offset = -1)

// example of when a peak is lower than the previous peak we delete any old lines and draw a new line connecting them
if (currentValley > previousValley)
    line.delete(valleyLine)
    valleyLine := line.new(x1 = previousValleyTime, y1 = previousValley, x2 = currentValleyTime, y2 = currentValley, xloc = xloc.bar_time, extend = extend.right)
    line.set_color(id = valleyLine, color = color.orange)
else
    line.delete(valleyLine)


// DAILY PEAKS
// To avoid differences on historical and realtime bars, you can use this technique, which only returns a value from the higher timeframe on the bar after it completes:
indexHighTF = barstate.isrealtime ? 1 : 0
indexCurrTF = barstate.isrealtime ? 0 : 1

// peaks1D = request.security(syminfo.tickerid, "D", calcPeaks(high[indexHighTF]), gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on)
// valleys1D = request.security(syminfo.tickerid, "D", calcValley(low[indexHighTF]), gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on)
[peaks1D, valley1D, time1D] = request.security(syminfo.tickerid, "D", [calcPeaks(high[indexHighTF]), calcValley(low[indexHighTF]), time[indexHighTF]], gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on)

var float previousDailyPeak = peaks1D
var int previousDailyPeakTime = time1D
var float currentDailyPeak = peaks1D
var int currentDailyPeakTime = time1D
var dailyPeakLine = line.new(x1 = 0, y1 = 0, x2 = 0, y2 = 0)

// if barstate.islastconfirmedhistory
//     label.new(bar_index, high, "OHLC values: " + str.tostring(valley1D))

// if (currentDailyPeak != peaks1D)
//     previousDailyPeak := currentDailyPeak
//     previousDailyPeakTime := previousDailyPeakTime
//     currentDailyPeak := peaks1D
//     currentDailyPeakTime := time1D

// TODO: I think the offset here needs to be -x amount of time that makes up 1 day.. like a multiplier
// Ex: 4hr would be -2... 1hr would be -8..
plot(valley1D, title='Valley Daily', color=color.new(color.orange, 0), linewidth=3, style=plot.style_cross, offset = 0)
plot(peaks1D, title='Peaks Daily', color=color.new(color.yellow, 0), linewidth=3, style=plot.style_cross, offset = 0)

// if (currentDailyPeak > previousDailyPeak)
//     line.delete(dailyPeakLine)
//     dailyPeakLine := line.new(x1 = previousDailyPeakTime, y1 = previousDailyPeak, x2 = currentDailyPeakTime, y2 = currentDailyPeak, xloc = xloc.bar_time, extend = extend.right)
//     line.set_color(id = dailyPeakLine, color = color.blue)
// else
//     line.delete(dailyPeakLine)

// ********** HIGH AND LOW ********** //
// Daily high and low
dailyhigh = request.security(syminfo.tickerid, 'D', high)
dailylow = request.security(syminfo.tickerid, 'D', low)

// Yesterday's Close
previousdayclose = request.security(syminfo.tickerid, 'D', close[1])

// Today's open
dayopen = request.security(syminfo.tickerid, 'D', open)

// Yesterday high and low
previousdayhigh = request.security(syminfo.tickerid, 'D', high[1])
previousdaylow = request.security(syminfo.tickerid, 'D', low[1])

// Premarket high and low
t = time("1440","0400-0930")
is_first = na(t[1]) and not na(t) or t[1] < t
ending_hour = 9
ending_minute = 30

pm_high = float(na)
pm_low = float(na)
k = int(na)

if is_first and barstate.isnew and (hour < ending_hour or hour >= 16 or hour == ending_hour and minute < ending_minute)
    pm_high := high
    pm_low := low
    pm_low
else
    pm_high := pm_high[1]
    pm_low := pm_low[1]
    pm_low

if high > pm_high and (hour < ending_hour or hour >= 1600 or hour == ending_hour and minute < ending_minute)
    pm_high := high
    pm_high

if low < pm_low and (hour < ending_hour or hour >= 1600 or hour == ending_hour and minute < ending_minute)
    pm_low := low
    pm_low

LastOnly = true

if LastOnly == true
    k := -9999
    k
else
    k := 0
    k

td = time - time[5]

// Daily high and low lines
plot(dailyhigh, style=plot.style_line, title='Daily High', color=color.new(#ffffff, 0), linewidth=1, trackprice=true, offset=k)
dh = label.new(x=time + td, y=dailyhigh, text='Day High', xloc=xloc.bar_time, style=label.style_none, textcolor=#ffffff, size=size.normal, textalign=text.align_center)
label.delete(dh[1])

plot(dailylow, style=plot.style_line, title='Daily High', color=color.new(#9c27b0, 0), linewidth=1, trackprice=true, offset=k)
dl = label.new(x=time + td, y=dailylow, text='Day Low', xloc=xloc.bar_time, style=label.style_none, textcolor=#9c27b0, size=size.normal, textalign=text.align_center)
label.delete(dl[1])

// Previous day high and low lines
plot(previousdayhigh, style=plot.style_line, title='Yesterday\'s high', color=color.new(#fffb00, 0), linewidth=1, trackprice=true, offset=k)
pdh = label.new(x=time + td, y=previousdayhigh, text='Previous High', xloc=xloc.bar_time, style=label.style_none, textcolor=#fbff00, size=size.normal, textalign=text.align_center)
label.delete(pdh[1])

plot(previousdaylow, style=plot.style_line, title='Yesterday\'s low', color=color.new(#ff90e7, 0), linewidth=1, trackprice=true, offset=k)
pdl = label.new(x=time + td, y=previousdaylow, text='Previous Low', xloc=xloc.bar_time, style=label.style_none, textcolor=#ff90e7, size=size.normal, textalign=text.align_center)
label.delete(pdl[1])

// Premarket high and low lines
plot(pm_high, style=plot.style_line, title='Premarket high', trackprice=true, color=color.new(#5eff00, 0), linewidth=1, offset=k)
pmh = label.new(x=time + td, y=pm_high, text='PM High', xloc=xloc.bar_time, style=label.style_none, textcolor=#5eff00, size=size.normal, textalign=text.align_center)
label.delete(pmh[1])

plot(pm_low, style=plot.style_line, title='Premarket low', trackprice=true, color=color.new(#ff0000, 0), linewidth=1, offset=k)
pml = label.new(x=time + td, y=pm_low, text='PM Low', xloc=xloc.bar_time, style=label.style_none, textcolor=#ff0000, size=size.normal, textalign=text.align_center)
label.delete(pml[1])
// ****** ************************ ********** //

// ********** MOVING AVERAGES & VWAP ********** //
ema_5 = ta.ema(close, 5)
sma_15 = ta.sma(close, 15)
vwap = ta.vwap(close)

plot(ema_5, title = 'SMA 5', color = color.new(color.green, 0))
plot(sma_15, title = 'SMA 15', color = color.new(color.purple, 0))
plot(vwap, title = 'VWAP', color = color.new(color.gray, 0))
// ****** ************************ ********** //